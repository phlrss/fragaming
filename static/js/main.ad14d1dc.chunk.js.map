{"version":3,"sources":["images/hammy-screenshot.jpeg","components/FraButton/index.js","components/FraButton/FraButton.jsx","components/FraHeader/index.js","components/FraHeader/FraHeader.jsx","components/FraFeaturedGame/index.js","components/FraFeaturedGame/FraFeaturedGame.jsx","pages/HomePage/index.js","pages/HomePage/HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","FraButton","text","link","style","classes","to","className","FraHeader","FraFeaturedGame","gameTitleLine1","gameTitleLine2","data-text","HomePage","src","HammyScreenshot","alt","onClick","window","open","App","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,+C,gQCE5BC,ECEG,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzBC,EAAO,qBAAiBD,GAC9B,OACE,kBAAC,IAAD,CAAME,GAAIH,EAAMI,UAAWF,GAAWH,ICL3BM,ECEG,WAChB,OACE,yBAAKD,UAAU,oBACb,kBAAC,EAAD,CAAWH,MAAM,OAAOD,KAAK,IAAID,KAAK,KACtC,yBAAKK,UAAU,sB,wBCNNE,G,MCCS,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,eACxC,OACE,yBAAKJ,UAAU,+BACb,0BAAMA,UAAU,oBAAoBK,YAAWF,GAAiBA,GAChE,0BAAMH,UAAU,oBAAoBK,YAAWD,GAAiBA,MCLvDE,G,MCGE,WACf,OACE,yBAAKN,UAAU,iBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAiBG,eAAe,QAAQC,eAAe,SAEzD,yBAAKJ,UAAU,mBACb,yBAAKA,UAAU,0BAA0BO,IAAKC,IAAiBC,IAAI,eAGvE,yBAAKT,UAAU,cACb,4BAAQU,QAAS,kBAAMC,OAAOC,KAAK,uEAAwE,WAAWZ,UAAU,+BCQzHa,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,KACV,kBAAC,EAAD,WCFQC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ad14d1dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hammy-screenshot.fd43eb29.jpeg\";","import FraButton from \"./FraButton\";\n\nexport default FraButton\n","import React from 'react'\nimport './FraButton.scss'\nimport { Link } from 'react-router-dom'\n\nconst FraButton = ({ text, link, style }) => {\n  const classes = `fra-button ${style}`\n  return (\n    <Link to={link} className={classes}>{ text }</Link>\n  )\n}\n\nexport default FraButton\n","import FraHeader from \"./FraHeader\";\n\nexport default FraHeader\n","import React from 'react';\nimport './FraHeader.scss'\nimport FraButton from '../FraButton';\n\nconst FraHeader = () => {\n  return (\n    <div className='header-container'>\n      <FraButton style='main' link='/' text='' />\n      <div className='fra-button-list'>\n        {/* <FraButton text='Games' link='/' /> */}\n        {/* <FraButton text='About Us' link='/about' /> */}\n      </div>\n    </div>\n  )\n}\n\nexport default FraHeader\n","import FraFeaturedGame from \"./FraFeaturedGame\";\n\nexport default FraFeaturedGame\n","import React from 'react'\nimport './FraFeaturedGame.scss'\n\nconst FraFeaturedGame = ({gameTitleLine1, gameTitleLine2}) => {\n  return (\n    <div className='fra-featured-game-container'>\n      <span className='fra-featured-game' data-text={gameTitleLine1}>{gameTitleLine1}</span>\n      <span className='fra-featured-game' data-text={gameTitleLine2}>{gameTitleLine2}</span>\n    </div>\n  )\n}\n\nexport default FraFeaturedGame\n","import HomePage from \"./HomePage\";\n\nexport default HomePage\n","import React from 'react';\nimport HammyScreenshot from '../../images/hammy-screenshot.jpeg'\nimport FraFeaturedGame from '../../components/FraFeaturedGame';\nimport './HomePage.scss';\n\nconst HomePage = () => {\n  return (\n    <div className='fra-home-page'>\n      <div className='fra-featured'>\n        <div className='left-half half'>\n          <FraFeaturedGame gameTitleLine1='Hammy' gameTitleLine2='Hop' />\n        </div>\n        <div className='right-half half'>\n          <img className='fra-featured-screenshot' src={HammyScreenshot} alt='featured' />\n        </div>\n      </div>\n      <div className='fra-footer'>\n        <button onClick={() => window.open('https://play.google.com/store/apps/details?id=com.FraGaming.HammyHop', '_blank')} className='fra-store-badge google'></button>\n        {/* <button className='fra-store-badge apple'></button> */}\n      </div>\n    </div>\n  )\n}\n\nexport default HomePage\n","import React from 'react';\nimport './App.scss';\nimport FraHeader from './components/FraHeader';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport HomePage from './pages/HomePage';\n// import AboutUsPage from './pages/AboutUsPage';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <FraHeader />\n        <Switch>\n          <Route path=\"*\">\n            <HomePage />\n          </Route>\n          {/* <Route exact path=\"/about\">\n            <AboutUsPage />\n          </Route> */}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}